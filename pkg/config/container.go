package config

// Container defines a structure for creating Docker containers
type Container struct {
	Name       string // name of the resource
	State      State
	NetworkRef *Network // reference to a network resource, added automatically
	WANRef     *Network // reference to the WAN network, added automatiacally

	Network string `hcl:"network"` // name of a network to attach the container to

	Image       Image    `hcl:"image,block"`         // image to use for the container
	Command     []string `hcl:"command,optional"`    // command to use when starting the container
	Environment []KV     `hcl:"env,block"`           // environment variables to set when starting the container
	Volumes     []Volume `hcl:"volume,block"`        // volumes to attach to the container
	IPAddress   string   `hcl:"ip_address,optional"` // ip address for the container, if empty ip is autogenerated
	Ports       []Port   `hcl:"port,block"`          // ports to expose

	Privileged bool `hcl:"privileged,optional"` // run the container in priviledged mode?

	// resource constraints
	Resources *Resources `hcl:"resources,block"` // resource constraints for the container
}

// Resources allows the setting of resource constraints for the Container
type Resources struct {
	CPU    int   `hcl:"cpu,optional"`     // cpu limit for the container where 1 CPU = 1024
	CPUPin []int `hcl:"cpu_pin,optional"` // pin the container to one or more cpu cores
	Memory int   `hcl:"memory,optional"`  // max memory the container can consume in MB
}

// Volume defines a folder, Docker volume, or temp folder to mount to the Container
type Volume struct {
	Source      string `hcl:"source"`        // source path on the local machine for the volume
	Destination string `hcl:"destination"`   // path to mount the volume inside the container
	Type        string `hcl:"type,optional"` // type of the volume to mount [bind, volume, tmpfs]
}

// KV is a key/value type
type KV struct {
	Key   string `hcl:"key"`
	Value string `hcl:"value"`
}

// Validate the config
func (c *Container) Validate() error {
	return nil
}
